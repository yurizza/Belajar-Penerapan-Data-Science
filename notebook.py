# -*- coding: utf-8 -*-
"""HR-project1-dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cu5nff0HiCs73FdoI0R7DUnonHZpn8n5

# Proyek Akhir: Menyelesaikan Permasalahan Perusahaan Jaya Jaya Maju

- Nama: Cici Yuriza
- Email: ciciyuriza999@gmail.com
- Id Dicoding: yuriza

## Persiapan

### Menyiapkan library yang dibutuhkan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import joblib

"""### Menyiapkan data yang akan diguankan

## Data Understanding
"""

pd.set_option('display.max_columns', None)

df = pd.read_csv('/content/employee_data.csv')
df.head()

df.info()

df['Attrition'].isna().sum()

"""##### Statistika Deskriptive"""

df.describe()

df['Education'].value_counts()

df['EnvironmentSatisfaction'].value_counts()

df['JobInvolvement'].value_counts()

df['JobLevel'].value_counts()

df['JobSatisfaction'].value_counts()

df['NumCompaniesWorked'].value_counts()

# menghitung jumlah masing2 kategori performance rating
value_counts = df['PerformanceRating'].value_counts()

# Menghitung total nilai
total_values = value_counts.sum()

# Menghitung persentase untuk setiap nilai
percentages = (value_counts / total_values) * 100

print(percentages)

df['RelationshipSatisfaction'].value_counts()

df['StockOptionLevel'].value_counts()

df['TrainingTimesLastYear'].value_counts()

df['WorkLifeBalance'].value_counts()

df['YearsSinceLastPromotion'].value_counts()

df['YearsWithCurrManager'].value_counts()

df['JobRole'].value_counts()

df['MaritalStatus'].value_counts()

df['Over18'].value_counts()

df['OverTime'].value_counts()

# menghitung jumlah masing2 kategori Gender
value_counts = df['Gender'].value_counts()

# Menghitung total nilai
total_values = value_counts.sum()

# Menghitung persentase untuk setiap nilai
percentages = (value_counts / total_values) * 100

print(percentages)

df['EducationField'].value_counts()

df['Department'].value_counts()

df['BusinessTravel'].value_counts()

df['Attrition'].value_counts()

"""Employee data memiliki 1470 baris dan 35 kolom.
Terdapat 412 missing value pada kolom Attrition.

Statistika deskriptif:
1. Rata-rata usia karyawan adalah 36 tahun.
2. Rata-rata daily rate \$802.49 dengan maksimum \$1499.
3. Jarak kantor ke rumah masing-masing karyawan rata-rata 9.19 km.
4. Sebagian besar karyawan memiliki gelar sarjana.
5. EnvironmentSatisfaction paling banyak berada di angka 3 dan 4 (high dan very high).
6. Rata-rata hourly rate (gaji per jam) adalah \$65.8 dengan maksimum \$100 dan minimum \$30.
7. JobInvolvement paling banyak berada pada level 3 (high).
8. Sebagian besar karyawan berada pada JobLevel 1 dan 2.
9. JobSatisfaction paling banyak pada level 4 dan 3 (very high dan high).
10. Rata-rata MonthlyIncome \$6502 dengan maksimum \$19999 dan minimum \$1000.
11. Rata-rata MonthlyRate \$14313.
12. NumCompaniesWorked paling banyak 1, paling sedikit 8.
13. PercentSalaryHike (persentase kenaikan gaji dari tahun lalu) rata-rata 15%.
14. Performance Rating karyawan hanya ada dua level, dengan level tertinggi 3 sekitar 84.63%, sisanya level 4.
15. RelationshipSatisfaction karyawan paling tinggi pada level high dan very high.
16. StandardHours karyawan dalam seminggu adalah 80 jam.
17. StockOptionLevel karyawan paling tinggi adalah level 0; makin tinggi level makin sedikit jumlah karyawan yang memilikinya.
18. TotalWorkingYears karyawan rata-rata 11 tahun, minimum 0 tahun dan maksimum 40 tahun.
19. TrainingTimesLastYear paling banyak 2 kali dan 3 kali.
20. WorkLifeBalance rata-rata berada pada level 3 (excellent).
21. YearsAtCompany karyawan rata-rata 7 tahun, minimum 0 dan maksimum 40 tahun.
22. YearsInCurrentRole karyawan rata-rata 4 tahun, minimum 0 tahun dan maksimum 18 tahun.
23. YearsSinceLastPromotion paling banyak adalah 0, dengan 581 karyawan yang belum dipromosikan sejak mereka bergabung. Maksimum adalah 15 tahun yaitu sekitar 13 karyawan.
24. YearsWithCurrManager paling banyak adalah 2 tahun, sekitar 344 karyawan.
25. Sebagian besar karyawan berstatus menikah (Married).
26. Semua karyawan berusia di atas 18 tahun.
27. Hanya sekitar 416 karyawan yang bekerja secara over time.
28. 60% karyawan adalah laki-laki.
29. Sebagian besar karyawan termasuk kategori Travel-Rarely.
30. Terdapat 179 karyawan yang mengalami attrition, 879 karyawan yang tidak mengalami attrition, dan ada 412 karyawan yang tidak terdata.

##### EDA
"""

# Hitung persentase untuk setiap kategori Attrition
attrition_counts = df['Attrition'].value_counts()

# Buat plot pie
plt.figure(figsize=(6, 6))
plt.pie(attrition_counts, labels=["No","Yes"], autopct='%1.1f%%', startangle=140)
plt.title('Attrition Distribution in Percentage')
plt.show()

"""Insight :


*   Sekitar 16.9% karyawan mengalami attrition.





"""

# Attrition vs Age
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='Age', hue='Attrition', multiple='stack', kde=True,bins=20)
plt.title('Attrition vs Age')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""Insight :
* Attrition cukup tinggi pada usia <= 40 tahun.


"""

# Attrition vs DailyRate
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='DailyRate', hue='Attrition', multiple='stack', kde=True, bins=30)
plt.title('Attrition vs DailyRate')
plt.xlabel('Daily Rate')
plt.ylabel('Frequency')
plt.show()

# Attrition vs MonthlyIncome
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='MonthlyIncome', hue='Attrition', multiple='stack', kde=True, bins=10)
plt.title('Attrition vs MonthlyIncome')
plt.xlabel('Monthly Income')
plt.ylabel('Frequency')
plt.show()

"""Insight :      
* Attrition tinggi pada karyawan dengan pendapatan bulanan kurang dari \$5000.
"""

# Filter DataFrame untuk menghilangkan nilai null pada Attrition
df_filtered = df.dropna(subset=['Attrition'])

# Hitung total jumlah karyawan pada setiap tingkat pendidikan
total_per_education = df_filtered['Education'].value_counts()

# Hitung jumlah karyawan yang mengalami Attrition pada setiap tingkat pendidikan
attrition_counts = df_filtered.groupby('Education')['Attrition'].sum()

# Hitung persentase Attrition pada setiap tingkat pendidikan
attrition_percentages = (attrition_counts / total_per_education) * 100

# Plot barplot
plt.figure(figsize=(10, 6))
attrition_percentages.plot(kind='bar', color='#EDA96F')
plt.title('Persentase Attrition pada Setiap Tingkat Pendidikan')
plt.xlabel('Tingkat Pendidikan')
plt.ylabel('Persentase Attrition (%)')
plt.xticks([0, 1, 2, 3, 4], ["1-Below College", "2-College", "3-Bachelor", "4-Master", "5-Doctor"],rotation=0) # Rotasi label sumbu x agar tidak tumpang tindih
plt.show()

"""Insight :      
* Tingkat attrisi untuk tingkat pendidikan adalah sebagai berikut: di bawah perguruan tinggi(Bellow College) memiliki tingkat attrisi tertinggi sebesar 19%, sementara tingkat perguruan tinggi(College), sarjana(Bachelor), dan magister(Master) semuanya memiliki tingkat attrisi di atas 14%.
"""

# Attrition vs TotalWorkingYears
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='TotalWorkingYears', hue='Attrition', multiple='stack', kde=True, bins=20)
plt.title('Attrition vs Total Working Years')
plt.xlabel('Total Working Years')
plt.ylabel('Frequency')
plt.show()

"""Insight :
* Total Working Years dibawah 13 Tahun memiliki tingkat attrition yang tinggi.
"""

# Menghitung persentase
attrition_overtime = df.groupby(['OverTime', 'Attrition']).size().reset_index(name='Count')
total_counts = df.groupby(['OverTime']).size().reset_index(name='Total')
attrition_overtime = attrition_overtime.merge(total_counts, on='OverTime')
attrition_overtime['Percentage'] = (attrition_overtime['Count'] / attrition_overtime['Total']) * 100

# Pie chart for OverTime Yes
overtime_yes = attrition_overtime[attrition_overtime['OverTime'] == 'Yes']
# labels_yes = overtime_yes['Attrition']
sizes_yes = overtime_yes['Percentage']
explode_yes = (0.15, 0)  # explode 1st slice for better visualization

# Pie chart for OverTime No
overtime_no = attrition_overtime[attrition_overtime['OverTime'] == 'No']
# labels_no = overtime_no['Attrition']
sizes_no = overtime_no['Percentage']
explode_no = (0.15, 0)  # explode 1st slice for better visualization

# Creating the subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Plotting the pie chart for OverTime Yes
ax1.pie(sizes_yes, explode=explode_yes, labels=['No Attrition','Yes Attrition'], autopct='%1.1f%%',
        shadow=True, startangle=90)
ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
ax1.set_title('Attrition Percentage for OverTime Yes')

# Plotting the pie chart for OverTime No
ax2.pie(sizes_no, explode=explode_no, labels=['No Attrition','Yes Attrition'], autopct='%1.1f%%',
        shadow=True, startangle=90)
ax2.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
ax2.set_title('Attrition Percentage for OverTime No')

# Display the plots
plt.show()

"""Insight :
* 31% karyawan yang lembur mengalami attrisi.
* 10% karyawan yang tidak lembur mengalami attrisi.
"""

# Attrition vs YearsAtCompany
plt.figure(figsize=(10, 6))
sns.histplot(data=df, x='YearsAtCompany', hue='Attrition', multiple='stack', kde=True, bins=30)
plt.title('Attrition vs Years At Company')
plt.xlabel('Years At Company')
plt.ylabel('Frequency')
plt.show()

"""Insight :
* Attrisi tertinggi terjadi pada karyawan dengan masa kerja 0 tahun.
* Karyawan dengan masa kerja di bawah 5 tahun memiliki tingkat attrisi yang tinggi.
"""

# Hitung jumlah karyawan dengan dan tanpa attrition untuk setiap jenis BusinessTravel
attrition_by_travel = df.groupby(['BusinessTravel', 'Attrition']).size().unstack(fill_value=0)

# Hitung total karyawan untuk setiap jenis BusinessTravel
total_by_travel = attrition_by_travel.sum(axis=1)

# Hitung persentase attrition untuk setiap kategori BusinessTravel
attrition_percentage_by_travel = (attrition_by_travel.T / total_by_travel).T * 100

# Plot pie untuk masing-masing kategori BusinessTravel
plt.figure(figsize=(15, 5))

# Travel Rarely
plt.subplot(1, 3, 1)
plt.pie(attrition_percentage_by_travel.loc['Travel_Rarely'], labels=['No Attrition', 'Attrition'], autopct='%1.1f%%', startangle=140)
plt.title('Travel Rarely')

# Travel Frequently
plt.subplot(1, 3, 2)
plt.pie(attrition_percentage_by_travel.loc['Travel_Frequently'], labels=['No Attrition', 'Attrition'], autopct='%1.1f%%', startangle=140)
plt.title('Travel Frequently')

# Non-Travel
plt.subplot(1, 3, 3)
plt.pie(attrition_percentage_by_travel.loc['Non-Travel'], labels=['No Attrition', 'Attrition'], autopct='%1.1f%%', startangle=140)
plt.title('Non-Travel')

plt.tight_layout()
plt.show()

"""Insight :
* Travel Frequently paling tinggi tingkat attritionnya mencapai 24.9%
"""

# Fungsi untuk menghitung persentase attrition
def calculate_attrition_percentage(df, column):
    attrition_counts = df.groupby([column, 'Attrition']).size().unstack(fill_value=0)
    total_counts = attrition_counts.sum(axis=1)
    attrition_percentage = (attrition_counts.T / total_counts).T * 100
    return attrition_percentage

# Hitung persentase attrition untuk setiap kolom yang diminta
columns_to_analyze = ['Department', 'EducationField', 'Gender', 'JobRole', 'MaritalStatus']
attrition_percentages = {col: calculate_attrition_percentage(df, col) for col in columns_to_analyze}

# Tampilkan hasil persentase attrition 0 dan 1
for col, percentages in attrition_percentages.items():
    print(f"\nPersentase Attrition untuk {col}:\n{percentages}\n")

"""Insight :
* Departemen Sales memiliki tingkat attrition mencapai 20%, yang 5% lebih tinggi dibandingkan dengan departemen lain.
* Bidang Pendidikan dengan gelar Teknik memiliki tingkat attrition tertinggi, mencapai 26%.
* Tidak terdapat perbedaan signifikan dalam persentase attrition antara gender Female dan Male.
* Peran Pekerjaan 'Sales Representative' memiliki tingkat attrition tertinggi, mencapai 43%.
* Status Pernikahan 'Single' memiliki tingkat attrition tertinggi, mencapai 26%.

## Data Preparation / Preprocessing
"""

# Handling Duplicate Data

df.duplicated().sum()

# Memilih kolom dengan tipe data float
float_columns = df.select_dtypes(include=['float','int'])

# Membuat heatmap
plt.figure(figsize=(20,10))
sns.heatmap(float_columns.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap Korelasi antar Kolom dengan Tipe Data Numeric')
plt.show()

# drop kolom yang tidak diperlukan dan kolom yang memiliki correlation > 0.5
df.drop(columns=['EmployeeId','EmployeeCount','Gender', 'Over18', 'StandardHours','JobLevel','TotalWorkingYears','YearsWithCurrManager','YearsSinceLastPromotion','PerformanceRating','YearsAtCompany','MonthlyRate','DailyRate','HourlyRate'], inplace=True)

# Handling Missing Value

# Separate rows with and without missing values in the 'Attrition' column
# Data kosong selanjutnya akan digunakan untuk testing model machine learning.
df_test = df[df['Attrition'].isnull()].reset_index().drop('index',axis=1)
df_train = df[df['Attrition'].notnull()].reset_index().drop('index',axis=1)

print("Total Data Testing =", df_test.shape[0])
print("Total Data Training =", df_train.shape[0])

"""## Modeling"""

# Kolom kategorikal yang akan di-encode
categorical_columns = ['BusinessTravel','Department', 'EducationField', 'JobRole', 'OverTime', 'MaritalStatus']

# OneHotEncoder untuk kolom kategorikal
encoder = OneHotEncoder(sparse=False)
encoded_data = encoder.fit_transform(df_train[categorical_columns])

# Mendapatkan nama kolom baru setelah encoding
encoded_columns = encoder.get_feature_names_out(categorical_columns)

# Membuat DataFrame baru dengan data yang sudah di-encode
encoded_df = pd.DataFrame(encoded_data, columns=encoded_columns)

# Menggabungkan DataFrame asli dengan DataFrame yang sudah di-encode
df_encoded = pd.concat([df_train.drop(categorical_columns, axis=1), encoded_df], axis=1)

# Pisahkan fitur dan target
X = df_encoded.drop(['Attrition'], axis=1)
y = df_encoded['Attrition']

# Membagi data menjadi set pelatihan dan set pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Melatih model RandomForestClassifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Prediksi menggunakan set pengujian
y_pred = model.predict(X_test)

# Evaluasi model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Simpan model
joblib.dump(model, 'trained_model.pkl')

# Simpan encoder
joblib.dump(encoder, 'encoder.pkl')

"""## Evaluation"""

# Menampilkan feature importance
feature_importances = model.feature_importances_
features = X.columns

# Membuat DataFrame untuk feature importance
importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})

# Mengurutkan berdasarkan importance
importance_df = importance_df.sort_values(by='Importance', ascending=False)

# Menampilkan plot
plt.figure(figsize=(10, 10))
plt.barh(importance_df['Feature'], importance_df['Importance'])
plt.xlabel('Feature Importance')
plt.ylabel('Features')
plt.title('Feature Importance in Random Forest')
plt.gca().invert_yaxis()
plt.show()

# ambil sepuluh fitur penting
# Mengurutkan berdasarkan importance dan ambil 10 fitur penting pertama
top_10_features = importance_df.nlargest(10, 'Importance')

# Menampilkan 10 fitur penting
print(top_10_features)

# Hitung matriks korelasi untuk fitur-fitur penting
correlation_matrix = df_encoded[top_10_features['Feature']].corr()

# Visualisasikan matriks korelasi menggunakan heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Important Features')
plt.show()

"""Insight :
* Monthly Income, Age, Distance From Home, Years In Current Role dan Num Companies Worked adalah lima kolom dengan tingkat pentingnya yang tinggi dalam model ini.
* Dengan akurasi mencapai 0.84, model Random Forest ini terbukti cukup andal dalam menangani ketidakseimbangan dan keberadaan outlier dalam data.
"""

# isi attrition untuk data test yang attritionnya NAN
df_test = df_test.drop('Attrition',axis=1)
encoded_data_test = encoder.transform(df_test[categorical_columns])
encoded_df_test = pd.DataFrame(encoded_data_test, columns=encoded_columns)
df_test_encoded = pd.concat([df_test.drop(categorical_columns, axis=1), encoded_df_test], axis=1)

# Prediksi menggunakan model yang telah dilatih
predictions = model.predict(df_test_encoded)

# Isi nilai prediksi ke dalam DataFrame df_test_encoded
df_test_encoded['Attrition'] = predictions

# Hitung jumlah nilai prediksi
value_counts = df_test_encoded['Attrition'].value_counts()

# Tampilkan hasil
print(value_counts)

# Menyisipkan kolom baru ke dalam DataFrame df_test pada posisi kolom nomor 1
df_test.insert(1, 'Attrition', predictions)

df_new = pd.concat([df_train,df_test],axis=0)

# Dictionary untuk mapping nilai ke label
education_mapping = {
    1: 'Below College',
    2: 'College',
    3: 'Bachelor Degree',
    4: 'Master',
    5: 'Doctor'
}

# Mengganti nilai di kolom 'Education'
df_new['Education'] = df_new['Education'].map(education_mapping)

# simpan data ke csv
df_new.to_csv('new_employee_data.csv',index=False)